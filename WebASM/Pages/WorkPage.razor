@page "/WorkPage"
@inject IWorkService WorkService
@using Mechanic.Shared.Modells
@using WebASM.Services
<h3>WorkPage</h3>

<div class="mb-3">
    <input class="form-control" placeholder="Search by license plate..." @bind="searchByPlate" />

</div>

<div class="d-flex justify-content-start mb-4 gap-2">
    <NavLink class="btn btn-primary btn-lg" href="WorkAdd">Add New</NavLink>
    <NavLink class="btn btn-warning btn-lg" href="WorkUpdate">Update</NavLink>
    <button class="btn btn-danger btn-lg" onclick="@DeleteWork" >Delete</button>
    <input class="form-control-sm bg-light-subtle border-danger" placeholder="Delete by id" @bind="searchById">
</div>

<table class="table table-dark table-striped-columns">
    <thead>
    <tr>
        <th>ID</th>
        <th>Client ID</th>
        <th>License Plate</th>
        <th>Production Date</th>
        <th>Category</th>
        <th>Severity</th>
        <th>Description</th>
        <th>Progress</th>
        <th>Estimated Total Hours</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var work in workList.Where(x=>x.LicensePlate.StartsWith(searchByPlate)))
    {
        <tr>
            <td>@work.Id</td>
            <td>@work.clientFK</td>
            <td>@work.LicensePlate</td>
            <td>@work.ProductionDate</td>
            <td>@work.WorkCategory</td>
            <td>@work.Severity</td>
            <td>@work.ShortDescription</td>
            <td>@work.Progress</td>
            <td>@Math.Ceiling(work.TotalHours)</td>
        </tr>
    }
    </tbody>
</table>

@code {

    private List<Work> workList = new List<Work>();
    string searchByPlate = "";
    string searchById = "";

    protected override async Task OnInitializedAsync()
    {
        workList = await WorkService.GetWorksAsync();
    }

    private async void DeleteWork()
    {
        searchById = searchById.Trim();
        short result;
        if (Int16.TryParse(searchById, out result))
        {
            if (workList.Select(x=>x.Id).Contains(result))
            {
                await WorkService.DeleteWorkAsync(result);
                workList = await WorkService.GetWorksAsync();
                StateHasChanged();
            }
        }
      
    }

}